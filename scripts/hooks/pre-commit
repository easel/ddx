#!/bin/bash

# DDx Pre-commit Hook
# This hook runs linting, formatting, and basic checks before commits

set -e

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if any checks failed
FAILED=0

# Function to run command and track failures
run_check() {
    local name="$1"
    local cmd="$2"
    
    echo -e "${BLUE}Checking $name...${NC}"
    
    if eval "$cmd"; then
        echo -e "${GREEN}‚úÖ $name passed${NC}"
    else
        echo -e "${RED}‚ùå $name failed${NC}"
        FAILED=1
    fi
    echo
}

# Detect project type and run appropriate checks
if [ -f "package.json" ]; then
    echo -e "${YELLOW}Detected Node.js project${NC}"
    
    # Check if staged files include JS/TS files
    if git diff --cached --name-only | grep -E '\.(js|jsx|ts|tsx)$' > /dev/null; then
        run_check "ESLint" "npm run lint 2>/dev/null || npx eslint --ext .js,.jsx,.ts,.tsx ."
        run_check "Prettier" "npm run format:check 2>/dev/null || npx prettier --check \"**/*.{js,jsx,ts,tsx,json,css,md}\""
        
        if command -v npm run type-check &> /dev/null; then
            run_check "TypeScript" "npm run type-check"
        fi
    fi
    
    # Run tests if test command exists
    if npm run test --silent 2>/dev/null; then
        run_check "Tests" "npm run test"
    fi

elif [ -f "go.mod" ]; then
    echo -e "${YELLOW}Detected Go project${NC}"
    
    if git diff --cached --name-only | grep '\.go$' > /dev/null; then
        run_check "Go Format" "test -z \$(gofmt -l .)"
        run_check "Go Vet" "go vet ./..."
        run_check "Go Build" "go build ./..."
        
        if command -v golangci-lint &> /dev/null; then
            run_check "Go Lint" "golangci-lint run"
        fi
        
        # Run tests if they exist
        if find . -name "*_test.go" | grep -q .; then
            run_check "Go Tests" "go test ./..."
        fi
    fi

elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
    echo -e "${YELLOW}Detected Python project${NC}"
    
    if git diff --cached --name-only | grep '\.py$' > /dev/null; then
        if command -v black &> /dev/null; then
            run_check "Black Format" "black --check ."
        fi
        
        if command -v ruff &> /dev/null; then
            run_check "Ruff Lint" "ruff check ."
        elif command -v flake8 &> /dev/null; then
            run_check "Flake8" "flake8 ."
        fi
        
        if command -v mypy &> /dev/null; then
            run_check "MyPy" "mypy ."
        fi
        
        # Run tests if pytest is available
        if command -v pytest &> /dev/null; then
            run_check "Pytest" "pytest"
        fi
    fi

elif [ -f "Cargo.toml" ]; then
    echo -e "${YELLOW}Detected Rust project${NC}"
    
    if git diff --cached --name-only | grep '\.rs$' > /dev/null; then
        run_check "Cargo Format" "cargo fmt --check"
        run_check "Cargo Clippy" "cargo clippy -- -D warnings"
        run_check "Cargo Build" "cargo build"
        run_check "Cargo Test" "cargo test"
    fi

else
    echo -e "${YELLOW}Unknown project type, running basic checks${NC}"
fi

# Check for common issues
run_check "No merge conflicts" "! git diff --cached | grep -E '^[<>=]{7}'"
run_check "No debug statements" "! git diff --cached | grep -i -E '(console\.log|debugger|pdb\.set_trace|println!|dbg!)'"

# DDx specific checks
if [ -f ".ddx.yml" ]; then
    run_check "DDx config" "ddx diagnose --check 2>/dev/null || true"
fi

# Final result
echo "----------------------------------------"
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}‚ùå Pre-commit checks failed. Please fix the issues above.${NC}"
    echo -e "${YELLOW}Tip: Run the failed commands manually to see detailed output${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
fi